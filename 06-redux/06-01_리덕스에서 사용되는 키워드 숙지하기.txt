✅액션
- 상태에 어떤 변화가 필요하게 되면, 액션을 발생시킴.
- 액션 객체는 <type> 필드를 필수적으로 가지고 있어야하고, 그 외의 값들은 마음대로.
- 예시들
    // 예시 1
    {
        type: "TOGGLE_VALUE"
    }
    // 예시 2
    {
        type: "Add_TODO",
        data: {
            id: 0,
            text: "리덕스 배우기",
        }
    }
    // 예시 3
    {
        type: "CHANGE_INPUT"
        text: "안녕하세요"
    }

✅액션 생성 함수
- 액션을 만드는 함수. 단순히 파라미터를 받아와서 액션 객체 형태로 만듦.
- 리덕스를 사용할 때 액션 생성함수를 사용하는 것이 필수적이진 않음. 액션을 발생시킬 때마다 직접 액션 객체를 작성할 수도 있음.
- 예시들
    // 예시 1
    export function addTodo(data) {
        return {
            type: "ADD_TODO",
            data
        }
    }
    // 예시 2
    export const changeInput = (text) => ({
        type: "CHANGE_INPUT",
        text
    })

✅리듀서
- 변화를 일으키는 함수
- 두 가지 파라미터를 받아옴: 1) state, 2) action
- default: 부분에는 기존 state를 반환
- 여러 개의 리듀서를 만ㄷ르고 이를 합쳐서 Root Reducer 작성
- 예시들
    // 예시 1
    function reducer(state, action) {
        // 상태 업데이트 로직
        return alteredState;
    }
    // 예시 2
    function counter(state, action) {
        switch(action.type) {
            case "INCREASE":
                return state + 1;
            case "DECREASE":
                return state - 1;
            default:
                return state;
        }
    }

✅스토어
- 하나의 어플리케이션당 하나의 스토어를 가짐
- 현재의 앱 상태와 리듀서가 들어가있고, 추가적으로 몇 가지 내장 함수들이 있음

✅디스패치
- 스토어의 내장함수 중 하나.
- 디스패치는 액션을 발생시킴
- dispatch라는 함수에는 액션을 파라미터로 전달 => dispatch(action)
- 그렇게 호출을 하면, 스토어는 리듀서 함수를 실행시켜서 해당 액션을 처리하는 로직이 있다면 액션을 참고하여 새로운 상태를 만듦.

✅구독
- 스토어의 내장함수 중 하나
- 함수 형태의 값을 파라미터로 받아옴
- subscribe 함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을 때마다 전달해준 함수가 호출됨
- 리액트에서는 이 함수를 직접 사용할 일이 별로 없을 것
- 대신에 react-redux라는 라이브러리에서 제공하는 connect 함수 또는 useSelector Hook을 사용하여 리덕스 스토어의 상태를 구독